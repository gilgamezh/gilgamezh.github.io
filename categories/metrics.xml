<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>No Todo Es Mecánico (metrics)</title><link>http://gilgamezh.me/</link><description></description><atom:link href="http://gilgamezh.me/categories/metrics.xml" type="application/rss+xml" rel="self"></atom:link><language>es</language><lastBuildDate>Sat, 16 Apr 2016 18:58:18 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>HowTo (stress)test a website with Apache Benchmark</title><link>http://gilgamezh.me/posts/howto-stresstest-a-website-with-apache-benchmark.html</link><dc:creator>GiLgAmEzH</dc:creator><description>&lt;div&gt;&lt;p&gt;Hoy por la mañana @reydelhumo queria probar un sitio que tiene en una raspy, yo
le recomendé que use &lt;cite&gt;ab&lt;/cite&gt; para hacer algunas pruebas básicas de load.&lt;/p&gt;
&lt;p&gt;Usar &lt;cite&gt;ab&lt;/cite&gt; es muy simple, pero es mucho más lindo poder hacer gráficos de los
resultados, así que aproveché el momento para armar este post.&lt;/p&gt;
&lt;p&gt;El objetivo es poder hacer varios tests contra una URL usando diferentes valores
de concurrencia/cantidad de requests y gráficar la salida.&lt;/p&gt;
&lt;p&gt;Primero hay que ejecutar las pruebas con &lt;cite&gt;ab&lt;/cite&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ab -c 3 -n 100 -v 2 -g out1.tsv -H "Accept-Encoding: gzip,deflate"  http://python.org.ar/
&lt;/pre&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;Esa configuración significa:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;cite&gt;-c 3&lt;/cite&gt;:  concurrencia 3&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;-n 15&lt;/cite&gt;:  15 request&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;-v 2&lt;/cite&gt;: verbose (muestra los headers)&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;-g out1.tsv&lt;/cite&gt;: salida para gnuplot&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;-H -H "Accept-Encoding: gzip,deflate"&lt;/cite&gt; Hacer requests con gzip (igual que cualquier browser)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La idea es repetir N veces la prueba con los mismos parametros renombrando outN.tsv.&lt;/p&gt;
&lt;p&gt;Yo ejecuté tres pruebas:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/tmp  ll out*.tsv
-rw-r--r-- 1 gilgamezh users 4934 Oct 31 11:26 out1.tsv
-rw-r--r-- 1 gilgamezh users 4930 Oct 31 11:26 out2.tsv
-rw-r--r-- 1 gilgamezh users 4936 Oct 31 11:27 out3.tsv
&lt;/pre&gt;
&lt;p&gt;Cada una nos da una resumen con una salida, pero mucho mejor ver un gráfico.
Con gnuplot es muy simple.&lt;/p&gt;
&lt;p&gt;Yo uso un template que edito cada vez:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# output as png image
set terminal png

# save file to "benchmark.png"
set output "benchmark_python.org.ar.png"

# graph title
set title "Benchmark en python.org.ar"

# aspect ratio for image size
set size 1,1

# enable grid on y-axis
set grid y

# x-axis label
set xlabel "Request"

# y-axis label
set ylabel "Response Time (ms)"

# plot data from bench1.tsv,bench2.tsv and bench3.tsv using column 10 with smooth sbezier lines
plot "out1.tsv" using 10 smooth sbezier with lines title "Benchmark 1:", \
     "out2.tsv" using 10 smooth sbezier with lines title "Benchmark 2:", \
     "out3.tsv" using 10 smooth sbezier with lines title "Benchmark 3:"
&lt;/pre&gt;
&lt;p&gt;Es un poco precario porque hay que editarlo a mano con el nombre de los .tsv.
Algún día me voy a tomar el tiempo de automatizar todo. ;)&lt;/p&gt;
&lt;p&gt;lo guardo como &lt;cite&gt;gnuplot.template&lt;/cite&gt; y ejecuto:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gnuplot gnuplot.template
&lt;/pre&gt;
&lt;p&gt;Y listo! tenemos nuestro gráfico.
(sí hay que tener gnuplot instalado. en Arch el paquete se llama &lt;cite&gt;python-gnuplot&lt;/cite&gt;)&lt;/p&gt;
&lt;img alt="/images/benchmark_python.org.ar.png" src="http://gilgamezh.me/images/benchmark_python.org.ar.png"&gt;
&lt;p&gt;Por ejemplo la conclusión de esta prueba es que python.org.ar necesita un caché de frontend :)&lt;/p&gt;&lt;/div&gt;</description><category>devops</category><category>metrics</category><category>webservers</category><guid>http://gilgamezh.me/posts/howto-stresstest-a-website-with-apache-benchmark.html</guid><pubDate>Sat, 31 Oct 2015 14:18:22 GMT</pubDate></item></channel></rss>